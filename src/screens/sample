import React, { useState } from 'react';
import { View, Text, SafeAreaView, Pressable, ImageBackground } from 'react-native';
import HeaderComponent from '../components/HeaderComponent';
import TextInputComponent from '../components/TextInputComponent';
import ButtonComponent from '../components/ButtonComponent';
import DateTimePickerModal from "react-native-modal-datetime-picker";
import GenderComponent from '../components/GenderComponent';
import { useNavigation } from '@react-navigation/native';
import { backArrow, calender, nextArrow, shadedIcon } from '../assets/images';
import { HEIGHT, WIDTH } from '../constants/Dimensions';
import { colors } from '../constants/Colors';

const AddChildScreen = () => {
    const Navigation = useNavigation();

    // State to hold child information
    const [childInfo, setChildInfo] = useState({
        name: '',
        gender: 'Male',
        dateOfBirth: ''
    });

    const [isDatePickerVisible, setDatePickerVisibility] = useState(false);

    const showDatePicker = () => {
        setDatePickerVisibility(true);
    };

    const hideDatePicker = () => {
        setDatePickerVisibility(false);
    };

    const handleDatePicked = (pickedDate) => {
        hideDatePicker();
        const day = pickedDate.getDate().toString().padStart(2, '0');
        const month = (pickedDate.getMonth() + 1).toString().padStart(2, '0');
        const year = pickedDate.getFullYear();
        const formattedDate = `${day}/${month}/${year}`;
        setChildInfo(prevInfo => ({
            ...prevInfo,
            dateOfBirth: formattedDate
        }));
    };

    const handleGenderPress = (selectedGender) => {
        // Update childInfo with the selected gender
        setChildInfo(prevInfo => ({
            ...prevInfo,
            gender: selectedGender
        }));
    };

    const handleNameChange = (name) => {
        // Update childInfo with the entered name
        setChildInfo(prevInfo => ({
            ...prevInfo,
            name: name
        }));
    };

    const handleAddChild = async () => {
        try {
            // Store child information in AsyncStorage
            await AsyncStorage.setItem('childName', childInfo.name);
            await AsyncStorage.setItem('childGender', childInfo.gender);
            await AsyncStorage.setItem('childDateOfBirth', childInfo.dateOfBirth);
            console.log("Child Information:", childInfo);
        } catch (error) {
            // Handle AsyncStorage error
            console.error("Error storing child information:", error);
        }
    };


    return (
        <View style={{}
        }>
            {/* ... Existing code ... */}
            < View style={{ marginTop: HEIGHT * 0.03 }}>
                <Text style={{ fontSize: 15, color: colors.darkViolet, marginBottom: HEIGHT * 0.01 }}> Name < /Text>
                    < TextInputComponent
                        placeholder="Name"
                        width={WIDTH * 0.85}
                        onChangeText={handleNameChange}
                    />
            </View>
            {/* ... Existing code ... */}
            <ButtonComponent
                background={colors.darkViolet}
                text="Add a child"
                nextarrow={nextArrow}
                textColor={colors.white}
                Bottom={HEIGHT * 0.26}
                width={WIDTH * 0.85}
                onPress={handleAddChild}
            />
        </View>

